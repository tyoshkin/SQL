Задание:
Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:

1.Число новых пользователей.
2.Число новых курьеров.
3.Общее число пользователей на текущий день.
4.Общее число курьеров на текущий день.

with cour as (SELECT date,
                     count(courier_id) as new_couriers
              FROM   (SELECT courier_id,
                             min(time) :: date as date
                      FROM   courier_actions
                      GROUP BY courier_id) t1
              GROUP BY date
              ORDER BY date),usr as (SELECT date,
                               count(user_id) as new_users
                        FROM   (SELECT user_id,
                                       min(time) :: date as date
                                FROM   user_actions
                                GROUP BY user_id) t1
                        GROUP BY date
                        ORDER BY date)
SELECT date,
       new_users,
       new_couriers,
       sum(new_users) OVER(ORDER BY date) ::int as total_users,
       sum(new_couriers) OVER(ORDER BY date) ::int as total_couriers
FROM   cour join usr using(date)

Задание:
На основе данных в таблице courier_actions для каждого дня рассчитайте, за сколько минут в среднем курьеры доставляли свои заказы.

with temp1 as (SELECT order_id,
                      time::date as date,
                      time as deliver_time,
                      accept_time
               FROM   courier_actions join (SELECT order_id,
                                                   time as accept_time
                                            FROM   courier_actions
                                            WHERE  action = 'accept_order'
                                               and order_id not in (SELECT order_id
                                                                 FROM   user_actions
                                                                 WHERE  action = 'cancel_order'))t1 using(order_id)
               WHERE  action = 'deliver_order'
                  and order_id not in (SELECT order_id
                                    FROM   user_actions
                                    WHERE  action = 'cancel_order'))
SELECT date,
       round(date_part('epoch', avg(time_diff) / 60))::int as minutes_to_deliver
FROM   (SELECT date,
               deliver_time - accept_time as time_diff
        FROM   temp1) t1
GROUP BY date
ORDER BY date

Задание:
Рассчитайте следующие показатели:

1. Прирост числа новых пользователей.
2. Прирост числа новых курьеров.
3. Прирост общего числа пользователей.
4. Прирост общего числа курьеров.

SELECT date,
       new_users,
       new_couriers,
       total_users,
       total_couriers,
       round(100 * (new_users - lag(new_users, 1) OVER (ORDER BY date)) / lag(new_users, 1) OVER (ORDER BY date)::decimal,
             2) as new_users_change,
       round(100 * (new_couriers - lag(new_couriers, 1) OVER (ORDER BY date)) / lag(new_couriers, 1) OVER (ORDER BY date)::decimal,
             2) as new_couriers_change,
       round(100 * new_users::decimal / lag(total_users, 1) OVER (ORDER BY date),
             2) as total_users_growth,
       round(100 * new_couriers::decimal / lag(total_couriers, 1) OVER (ORDER BY date),
             2) as total_couriers_growth
FROM   (SELECT start_date as date,
               new_users,
               new_couriers,
               (sum(new_users) OVER (ORDER BY start_date))::int as total_users,
               (sum(new_couriers) OVER (ORDER BY start_date))::int as total_couriers
        FROM   (SELECT start_date,
                       count(courier_id) as new_couriers
                FROM   (SELECT courier_id,
                               min(time::date) as start_date
                        FROM   courier_actions
                        GROUP BY courier_id) t1
                GROUP BY start_date) t2
            LEFT JOIN (SELECT start_date,
                              count(user_id) as new_users
                       FROM   (SELECT user_id,
                                      min(time::date) as start_date
                               FROM   user_actions
                               GROUP BY user_id) t3
                       GROUP BY start_date) t4 using (start_date)) t5
                       
Задание:
Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:

1. Число платящих пользователей.
2. Число активных курьеров.
3. Долю платящих пользователей в общем числе пользователей на текущий день.
4. Долю активных курьеров в общем числе курьеров на текущий день.

SELECT date,
       paying_users,
       active_couriers,
       round(100 * paying_users::decimal / total_users, 2) as paying_users_share,
       round(100 * active_couriers::decimal / total_couriers, 2) as active_couriers_share
FROM   (SELECT start_date as date,
               new_users,
               new_couriers,
               (sum(new_users) OVER (ORDER BY start_date))::int as total_users,
               (sum(new_couriers) OVER (ORDER BY start_date))::int as total_couriers
        FROM   (SELECT start_date,
                       count(courier_id) as new_couriers
                FROM   (SELECT courier_id,
                               min(time::date) as start_date
                        FROM   courier_actions
                        GROUP BY courier_id) t1
                GROUP BY start_date) t2
            LEFT JOIN (SELECT start_date,
                              count(user_id) as new_users
                       FROM   (SELECT user_id,
                                      min(time::date) as start_date
                               FROM   user_actions
                               GROUP BY user_id) t3
                       GROUP BY start_date) t4 using (start_date)) t5
    LEFT JOIN (SELECT time::date as date,
                      count(distinct courier_id) as active_couriers
               FROM   courier_actions
               WHERE  order_id not in (SELECT order_id
                                       FROM   user_actions
                                       WHERE  action = 'cancel_order')
               GROUP BY date) t6 using (date)
    LEFT JOIN (SELECT time::date as date,
                      count(distinct user_id) as paying_users
               FROM   user_actions
               WHERE  order_id not in (SELECT order_id
                                       FROM   user_actions
                                       WHERE  action = 'cancel_order')
               GROUP BY date) t7 using (date)
               
Задание:
Для каждого дня, представленного в таблице user_actions, рассчитайте следующие показатели:

1. Общее число заказов.
2. Число первых заказов (заказов, сделанных пользователями впервые).
3. Число заказов новых пользователей (заказов, сделанных пользователями в тот же день, когда они впервые воспользовались сервисом).
4. Долю первых заказов в общем числе заказов (долю п.2 в п.1).
5. Долю заказов новых пользователей в общем числе заказов (долю п.3 в п.1).

with orders_count as (SELECT time::date as date,
                             count(distinct order_id) as orders
                      FROM   user_actions
                      WHERE  order_id not in (SELECT order_id
                                              FROM   user_actions
                                              WHERE  action = 'cancel_order')
                      GROUP BY date), first_order_count as (SELECT first_order,
                                             count(distinct user_id) as first_orders
                                      FROM   (SELECT time::date as date,
                                                     user_id,
                                                     min(time::date) OVER (PARTITION BY user_id) as first_order
                                              FROM   user_actions
                                              WHERE  order_id not in (SELECT order_id
                                                                      FROM   user_actions
                                                                      WHERE  action = 'cancel_order')) t1
                                      GROUP BY first_order), ffs as (SELECT date,
                                      sum(new_orders_2)::int new_users_orders
                               FROM   (SELECT date,
                                              coalesce (new_orders, 0) new_orders_2
                                       FROM   (SELECT min(time::date) date,
                                                      user_id
                                               FROM   user_actions
                                               GROUP BY user_id
                                               ORDER BY date) t2
                                           LEFT JOIN (SELECT time::date date,
                                                             count(order_id) new_orders,
                                                             user_id
                                                      FROM   user_actions
                                                      WHERE  order_id not in (SELECT order_id
                                                                              FROM   user_actions
                                                                              WHERE  action = 'cancel_order')
                                                      GROUP BY date, user_id) t3 using (date, user_id)) t3
                               GROUP BY date
                               ORDER BY date)
SELECT date,
       orders,
       first_orders,
       new_users_orders,
       round(first_orders::decimal / orders * 100, 2) as first_orders_share,
       round(new_users_orders::decimal / orders * 100, 2) as new_users_orders_share
FROM   orders_count join first_order_count
        ON orders_count.date = first_order_count.first_order join ffs using(date)
        
Задание:
На основе данных в таблице user_actions рассчитайте показатель дневного Retention для всех пользователей, разбив их на когорты по дате первого взаимодействия с
нашим приложением.

В результат включите четыре колонки: месяц первого взаимодействия, дату первого взаимодействия, количество дней, прошедших с даты первого взаимодействия 
(порядковый номер дня начиная с 0), и само значение Retention.

SELECT date_trunc('month', first_date)::date as start_month,
       first_date as start_date,
       date - first_date as day_number,
       round(count(distinct user_id)::decimal / max(count(distinct user_id)) OVER(PARTITION BY first_date), 2) as retention FROM
                            (SELECT user_id,
                            time::date as date,
                            min(time::date) OVER(PARTITION BY user_id) as first_date
                     FROM   user_actions) t1
GROUP BY date, first_date
ORDER BY start_date, day_number

Задание:
Для каждой рекламной кампании для каждого дня посчитайте две метрики:

1. Накопительный ARPPU.
2. Затраты на привлечение одного покупателя (CAC).

with main_table as (SELECT ads_campaign,
                           user_id,
                           order_id,
                           time,
                           product_id,
                           price
                    FROM   (SELECT ads_campaign,
                                   user_id,
                                   order_id,
                                   time
                            FROM   (SELECT user_id,
                                           order_id,
                                           time,
                                           case when user_id in (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657,
                                                                 8706, 9476, 9813, 8940, 9971, 10122, 8732, 9689, 9198,
                                                                 8896, 8815, 9689, 9075, 9071, 9528, 9896, 10135, 9478,
                                                                 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599,
                                                                 9351, 8638, 8752, 9998, 9431, 9660, 9004, 8632, 8896,
                                                                 8750, 9605, 8867, 9535, 9494, 9762, 8990, 9526, 9786,
                                                                 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550,
                                                                 8707, 8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677,
                                                                 9896, 8933, 8828, 9108, 9180, 9897, 9960, 9472, 9818,
                                                                 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                                                 8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679,
                                                                 9251, 10001, 8867, 8707, 9945, 9562, 10013, 9020, 9317,
                                                                 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197, 9398,
                                                                 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512,
                                                                 9794, 9019, 9287, 9561, 9321, 9677, 10122, 8752, 9810,
                                                                 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182, 9451,
                                                                 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105,
                                                                 8774, 8631, 9081, 8845, 9451, 9019, 8750, 8788, 9625,
                                                                 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                                                 9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223,
                                                                 9420, 8830, 9615, 8859, 9887, 9491, 8739, 8770, 9069,
                                                                 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113,
                                                                 10051) then 1
                                                when user_id in (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267,
                                                                 9161, 9231, 8953, 9863, 8878, 10078, 9370, 8675, 9961,
                                                                 9007, 9207, 9539, 9335, 8700, 9598, 9068, 9082, 8916,
                                                                 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033,
                                                                 9137, 9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749,
                                                                 10027, 9757, 9788, 8646, 9567, 9140, 9719, 10073, 9000,
                                                                 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                                                 9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795,
                                                                 9082, 8814, 8795, 10067, 9700, 9432, 9783, 10081, 9591,
                                                                 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825, 9692,
                                                                 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655,
                                                                 8890, 9000, 8827, 9485, 9013, 9042, 10047, 8798, 9250,
                                                                 8929, 9161, 9545, 9333, 9230, 9841, 8659, 9181, 9880,
                                                                 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827,
                                                                 9530, 9310, 9711, 9383, 9527, 8968, 8973, 9497, 9753,
                                                                 8980, 8838, 9370, 8682, 8854, 8966, 9658, 9939, 8704,
                                                                 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635,
                                                                 9273, 9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058,
                                                                 9479, 9259, 9368, 9908, 9468, 8902, 9292, 8742, 9672,
                                                                 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                                                 8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231,
                                                                 9109, 9123, 8806, 9229, 9741, 9303, 9303, 10045, 9744,
                                                                 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498, 9877,
                                                                 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492,
                                                                 9920, 9853, 8803, 9711, 9885, 9560, 8886, 8644, 9636,
                                                                 10073, 10106, 9859, 8943, 8849, 8629, 8729, 9227, 9711,
                                                                 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079,
                                                                 9596, 8748, 9327, 9790, 8719, 9706, 9289, 9047, 9495,
                                                                 9558, 8650, 9784, 8935, 9764, 8712) then 2
                                                else 0 end as ads_campaign,
                                           count(action) filter (WHERE action = 'cancel_order') OVER (PARTITION BY order_id) as is_canceled
                                    FROM   user_actions) t1
                            WHERE  ads_campaign in (1, 2)
                               and is_canceled = 0) t2
                        LEFT JOIN (SELECT order_id,
                                          unnest(product_ids) as product_id
                                   FROM   orders) t3 using(order_id)
                        LEFT JOIN products using(product_id))
SELECT concat('Кампания № ', ads_campaign) as ads_campaign,
       concat('Day ', row_number() OVER (PARTITION BY ads_campaign
                                         ORDER BY date) - 1) as day,
       round(sum(revenue) OVER (PARTITION BY ads_campaign
                                ORDER BY date) / paying_users::decimal, 2) as cumulative_arppu,
       cac
FROM   (SELECT ads_campaign,
               time::date as date,
               sum(price) as revenue
        FROM   main_table
        GROUP BY ads_campaign, time::date) t1
    LEFT JOIN (SELECT ads_campaign,
                      count(distinct user_id) as paying_users,
                      round(250000.0 / count(distinct user_id), 2) as cac
               FROM   main_table
               GROUP BY ads_campaign) t2 using (ads_campaign)
